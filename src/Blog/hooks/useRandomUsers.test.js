import { renderHook, waitFor } from "@testing-library/react";
import useRandomUsers from "./useRandomUsers";
import mockAxios from "jest-mock-axios";

afterEach(() => {
  mockAxios.reset();
});

describe("useRandomUsers_function", () => {
  // Tests that 7 random male users are generated by default
  it("test_default_male_users", async () => {
    const mockData = {
      results: Array(7).fill({ gender: "male" }),
    };

    mockAxios.get.mockResolvedValueOnce({ data: mockData });

    const { result } = renderHook(() => useRandomUsers());

    await waitFor(() => expect(result.current.users.length).toBe(7));

    expect(result.current.userProfile.gender).toBe("male");
  });

  // Tests that 5 random female users are generated
  it("test_female_users", async () => {
    const mockData = {
      results: Array(5).fill({ gender: "female" }),
    };

    mockAxios.get.mockResolvedValueOnce({ data: mockData });

    const { result } = renderHook(() => useRandomUsers());

    await waitFor(() => expect(result.current.users.length).toBe(5));

    expect(result.current.userProfile.gender).toBe("female");
  });

  // Tests that a list of 10 random users is generated
  it("test_custom_results", async () => {
    const mockData = {
      results: Array(10).fill({ gender: "male" }),
    };

    mockAxios.get.mockResolvedValueOnce({ data: mockData });

    const { result } = renderHook(() => useRandomUsers());

    await waitFor(() => expect(result.current.users.length).toBe(10));

    expect(result.current.userProfile.gender).toBe("male");
  });

  // Tests that a list of 1 random male user is generated
  it("test_single_male_user", async () => {
    const mockData = {
      results: Array(1).fill({ gender: "male" }),
    };

    mockAxios.get.mockResolvedValueOnce({ data: mockData });

    const { result } = renderHook(() => useRandomUsers());

    await waitFor(() => expect(result.current.users.length).toBe(1));

    expect(result.current.userProfile.gender).toBe("male");
  });

  // Tests that a list of 0 random users is generated
  it("test_zero_users", async () => {
    const mockData = {
      results: Array(0).fill({ gender: "male" }),
    };

    mockAxios.get.mockResolvedValueOnce({ data: mockData });

    const { result } = renderHook(() => useRandomUsers());

    await waitFor(() => expect(result.current.users.length).toBe(0));

    expect(result.current.userProfile.gender).not.toBe("male");
  });

  // Tests that a list of 5000 random users is generated
  it("test_large_number_of_users", async () => {
    const mockData = {
      results: Array(5000).fill({ gender: "male" }),
    };

    mockAxios.get.mockResolvedValueOnce({ data: mockData });

    const { result } = renderHook(() => useRandomUsers());

    await waitFor(() => expect(result.current.users.length).toBe(5000));

    expect(result.current.userProfile.gender).toBe("male");
  });
});
