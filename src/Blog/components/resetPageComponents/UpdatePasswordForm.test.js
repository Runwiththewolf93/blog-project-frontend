import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import UpdatePasswordForm from "./UpdatePasswordForm";
import { useAppContextDispatch } from "../../store/appContext";

global.alert = jest.fn();

// Mocks
jest.mock("../../store/appContext", () => ({
  useAppContextDispatch: jest.fn().mockReturnValue({
    updateUserPassword: jest.fn(),
    resetSuccessMessage: jest.fn(),
    resetErrorMessage: jest.fn(),
  }),
}));

const mockNavigate = jest.fn();
jest.mock("react-router-dom", () => ({
  useNavigate: jest.fn(() => mockNavigate),
}));

const mockOnClose = jest.fn();

// Mocking the FormComponents
jest.mock("./FormComponents", () => ({
  AlertMessage: jest.fn(({ message, onClose, ...props }) => {
    // Call the mock function when the close button is clicked
    const handleClose = () => {
      mockOnClose();
      onClose();
    };

    return (
      <div role="alert">
        AlertMessage: <span>{message}</span>
        <button role="button" onClick={handleClose}>
          Close
        </button>
      </div>
    );
  }),
  PasswordField: jest.fn(
    ({
      label,
      onChange,
      placeholder,
      showPassword,
      togglePasswordVisibility,
      ...props
    }) => (
      <div>
        <div>PasswordField: {JSON.stringify({ ...props })}</div>
        <label htmlFor={label.split(" ")[0]}>{label}</label>
        <input
          id={label.split(" ")[0]}
          onChange={e => onChange(e)}
          placeholder={placeholder}
          type={showPassword ? "text" : "password"}
        />
        <label htmlFor={label.split(" ")[0] + "Toggle"}>Show {label}</label>
        <input
          id={label.split(" ")[0] + "Toggle"}
          type="checkbox"
          onClick={togglePasswordVisibility}
        />
      </div>
    )
  ),
  ClearSubmitButtonGroup: jest.fn(
    ({ clearLabel, submitLabel, handleClear, ...props }) => {
      // Call handleClear when the "Clear" button is clicked
      const handleClick = () => {
        handleClear();
      };

      return (
        <div>
          ClearSubmitButtonGroup: {JSON.stringify(props)}
          <button>{submitLabel}</button>
          <button onClick={handleClick}>{clearLabel}</button>
        </div>
      );
    }
  ),
  FormCard: jest.fn(({ children, ...props }) => (
    <div>
      FormCard: {JSON.stringify(props)}
      {children}
    </div>
  )),
}));

// Generated by CodiumAI

describe("UpdatePasswordForm_function", () => {
  // Tests that the form renders without errors
  it("test_form_renders_without_errors", () => {
    const props = {
      isLoadingReset: false,
      successMessage: "",
      errorReset: "",
      userInfo: { _id: "12345", name: "John Doe" },
    };

    render(<UpdatePasswordForm {...props} />);
  });

  // Tests that the user can enter the current and new password
  it("test_user_can_enter_current_and_new_password", () => {
    const props = {
      isLoadingReset: false,
      successMessage: "",
      errorReset: "",
      userInfo: { _id: "12345", name: "John Doe" },
    };

    render(<UpdatePasswordForm {...props} />);

    const currentPasswordInput = screen.getByPlaceholderText(
      "Enter current password"
    );
    const newPasswordInput = screen.getByPlaceholderText("Enter new password");

    fireEvent.change(currentPasswordInput, {
      target: { value: "currentPassword" },
    });
    fireEvent.change(newPasswordInput, { target: { value: "newPassword" } });

    expect(currentPasswordInput.value).toBe("currentPassword");
    expect(newPasswordInput.value).toBe("newPassword");
  });

  // Tests that the user can toggle password visibility
  it("test_user_can_toggle_password_visibility", () => {
    const props = {
      isLoadingReset: false,
      successMessage: "",
      errorReset: "",
      userInfo: { _id: "12345", name: "John Doe" },
    };

    render(<UpdatePasswordForm {...props} />);

    const currentPasswordInput = screen.getByLabelText("Current Password");
    const newPasswordInput = screen.getByLabelText("New Password");
    const currentPasswordToggle = screen.getByLabelText(
      "Show Current Password"
    );
    const newPasswordToggle = screen.getByLabelText("Show New Password");

    fireEvent.change(currentPasswordInput, {
      target: { value: "currentPassword" },
    });
    fireEvent.change(newPasswordInput, { target: { value: "newPassword" } });
    fireEvent.click(currentPasswordToggle);
    fireEvent.click(newPasswordToggle);

    expect(currentPasswordInput.type).toBe("text");
    expect(newPasswordInput.type).toBe("text");
  });

  // Tests that the user cannot submit the form with passwords less than 6 characters
  it("test_user_cannot_submit_form_with_passwords_less_than_6_characters", () => {
    const props = {
      isLoadingReset: false,
      successMessage: "",
      errorReset: "",
      userInfo: { _id: "12345", name: "John Doe" },
    };

    render(<UpdatePasswordForm {...props} />);

    const currentPasswordInput = screen.getByPlaceholderText(
      "Enter current password"
    );
    const newPasswordInput = screen.getByPlaceholderText("Enter new password");
    const submitButton = screen.getByText("Update");

    fireEvent.change(currentPasswordInput, { target: { value: "12345" } });
    fireEvent.change(newPasswordInput, { target: { value: "12345" } });
    fireEvent.click(submitButton);

    expect(alert).toHaveBeenCalledWith(
      "Passwords should have a length of at least six characters!"
    );
  });

  // Tests that an error message is displayed if the password update fails
  it("test_error_message_is_displayed_if_password_update_fails", async () => {
    const updateUserPassword = jest.fn(() => {
      return "Password update failed";
    });
    const resetSuccessMessage = jest.fn();
    const resetErrorMessage = jest.fn();

    jest
      .spyOn(require("../../store/appContext"), "useAppContextDispatch")
      .mockReturnValue({
        updateUserPassword,
        resetSuccessMessage,
        resetErrorMessage,
      });

    const props = {
      isLoadingReset: false,
      successMessage: "",
      errorReset: "",
      userInfo: { _id: "12345", name: "John Doe" },
    };

    const { rerender } = render(<UpdatePasswordForm {...props} />);

    const currentPasswordInput = screen.getByPlaceholderText(
      "Enter current password"
    );
    const newPasswordInput = screen.getByPlaceholderText("Enter new password");
    const submitButton = screen.getByText("Update");

    fireEvent.change(currentPasswordInput, {
      target: { value: "currentPassword" },
    });
    fireEvent.change(newPasswordInput, { target: { value: "newPassword" } });
    fireEvent.click(submitButton);

    // Wait for the updateUserPassword function to be called
    await waitFor(() => expect(updateUserPassword).toHaveBeenCalled());

    // Rerender the component with the updated value of errorReset
    rerender(
      <UpdatePasswordForm {...props} errorReset="Password update failed" />
    );

    // Wait for the error message to be displayed
    await waitFor(() => screen.findByText("Password update failed"));
  });

  // Tests that the error message is reset when the user information changes
  it("test_reset_error_message_when_user_information_changes", async () => {
    const resetErrorMessage = jest.fn();

    useAppContextDispatch.mockReturnValue({
      resetErrorMessage,
    });

    const userInfo = { name: "John Doe" };

    const { rerender } = render(
      <UpdatePasswordForm
        resetErrorMessage={resetErrorMessage}
        userInfo={userInfo}
      />
    );

    expect(resetErrorMessage).toHaveBeenCalled();

    resetErrorMessage.mockClear();
    const newUserInfo = { name: "Jane Doe" };

    rerender(
      <UpdatePasswordForm
        resetErrorMessage={resetErrorMessage}
        userInfo={newUserInfo}
      />
    );

    expect(resetErrorMessage).toHaveBeenCalled();
  });
});
